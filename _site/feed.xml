<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nnamso Anthony</title>
    <description>I connect the Dot 
</description>
    <link>http://nnamso.github.io/</link>
    <atom:link href="http://nnamso.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 14 Jan 2017 16:15:45 +0100</pubDate>
    <lastBuildDate>Sat, 14 Jan 2017 16:15:45 +0100</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>How many tabs can you open on google chrome ?</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://www.howtogeek.com/wp-content/uploads/2013/01/650x250xchrome-dead-tab.png.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.JCTkjqCRyP.png&quot;/&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;My little nephew asked me this question today&lt;/p&gt;

&lt;p&gt;Allen: Uncle how many tabs can you open in your browser?&lt;/p&gt;

&lt;p&gt;The reality is that it depends on the type of hardware you use.
I&amp;#39;m not a fan of bookmarks. I basically open so much stuff that I end up not reading them.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s what happens when cool kinds of stuff keep popping up whenever you are hooked with fast internet.&lt;/p&gt;

&lt;p&gt;The bigger the screen the more you are likely to open the more tabs.&lt;/p&gt;

&lt;p&gt;I have no issues. I have noticed that Chrome uses lots of RAM when a large number of tabs are open. I suspect that this is the key to being able to keep this many open. In firefox, all of the tabs run in 1 processor thread. This causes it to be subject to the 32 bit RAM usage limit. Chrome, instead, creates a new process for each tab or tab group, allowing it to use as much ram as it needs.&lt;/p&gt;

&lt;p&gt;This brings me back to my second point. Chrome can use as much as it needs, as long as you have enough ram. My computer has 8GB of ram, so I have no problem with 40+ tabs. In firefox, I get to 20 before it locks up.&lt;/p&gt;

&lt;p&gt;Finally, my first point: Depending on your screen size at 50 tabs upward, I can no longer see the favicons that help me distinguish tabs apart.&lt;/p&gt;

&lt;p&gt;Chrome should handle as many tabs as you need. If you have more ram than me and would like to test, let me know how many you get running.&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Jan 2017 04:33:00 +0100</pubDate>
        <link>http://nnamso.github.io/tech/2017/01/14/How-many-tabs-can-you-open-on-google-chrome.html</link>
        <guid isPermaLink="true">http://nnamso.github.io/tech/2017/01/14/How-many-tabs-can-you-open-on-google-chrome.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>The Disadvantages of Single Page Applications</title>
        <description>&lt;h3&gt;The disadvantages of Single Page Applications&lt;/h3&gt;

&lt;p&gt;Single Page Applications (SPAs) have become extremely popular on the web, because they are supposed to provide a more fluid user experience. However, there are many UX and technical problems that arise from architecting websites this way. Before getting to them, let’s first discuss the difference between an SPA and a traditional multi-page website (MPW).&lt;/p&gt;

&lt;p&gt;What’s the difference between a Single Page App and an Multi-page Website?
Whilst it’s common to associate MVC, MVVM, XHR, DOM manipulation (and more) with an SPA, this article doesn’t address them because they could also be used in an MPW.&lt;/p&gt;

&lt;p&gt;What really defines an SPA is the fact that the routing is handled by the client-side application using Javascript, instead of the server.&lt;/p&gt;

&lt;p&gt;This means the application handles the browsing instead of the browser. Attempting to mimic the browser using Javascript is what causes these self-induced issues. Let’s take a look.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigation and fast back
Browsers store history, meaning pages load quickly when the user presses the back button. SPAs need to recreate this functionality. As Daniel Puplus says in his article:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;“Back should be quick; users don’t expect data to have changed much.&lt;/p&gt;

&lt;p&gt;“When a user presses the browser’s back button they expect the change to happen quickly and for the page to be in a similar state to how it was last time they saw it.&lt;/p&gt;

&lt;p&gt;“In the traditional web model the browser will typically be able use a cached version of the page and linked resources.&lt;/p&gt;

&lt;p&gt;“In a naive implementation of a SPA hitting back will do the same thing as clicking a link, resulting in a server request, additional latency, and possibly visual data changes.”&lt;/p&gt;

&lt;p&gt;When ‘navigating’, the application will need a method of storing and retrieving ‘pages’ from a cache. Unless of course you want to slow down the loading ‘pages’, which is meant to be a significant benefit of SPAs. Storage options could include memory, local (or session) storage, client-side database and cookies.&lt;/p&gt;

&lt;p&gt;Note: The words ‘navigating’ and ‘pages’ are in quotes because SPAs, by definition, don’t have the concept of navigation and pages in the traditional sense. Quotes will be discarded going forward for brevity.&lt;/p&gt;

&lt;p&gt;The application will also need to determine when to store and retrieve pages from the cache. Navigation typically utilises pushState or hashchange and the application will need to differentiate between the user changing the URL (via clicking a link or typing a URL in the location bar) or manually hitting back/forward, which is not straightforward.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigation and remembering scroll history position
Browsers conveniently remember the scroll position of pages you have visited and as Daniel Puplus says in his article:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;“Lots of sites get this wrong and it’s really annoying. When the user navigates using the browser’s forward or back button the scroll position should be the same as it was last time they were on the page. This sometimes works correctly on Facebook but sometimes doesn’t. Google+ always seems to lose your scroll position.”&lt;/p&gt;

&lt;p&gt;Clicking forward or back should remember the scroll position, but unfortunately, as SPAs rely on faux navigation, this functionality is lost. Upon navigation, the application will need to remember the scroll position so that it can be retrieved later. This is a topic heavily related to “Navigation and fast back” discussed previously.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cancelling navigation
The browser provides a cancel button which when pressed, cancels the loading of the requested page. If a user clicks another link, the browser will cancel the previous request if one is in progress. This is useful for performance and also ensures the user’s internet data allowance isn’t eaten up unnecessarily.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SPA pages are likely to be retrieved via XHR, meaning several requests could be in progress at the same time; the first page request might be loaded last, even though it should have been cancelled out by the second page request. Also, the same link could be clicked twice, meaning the page will be requested (and loaded) twice, which is not efficient and could also cause visual glitches.&lt;/p&gt;

&lt;p&gt;The application will need to handle this functionality too. This means exposing a custom cancel button (undesirable), and the duplicate requests need handling as well as cancelling all previous in-progress requests.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigation and data loss
Browsers normally provide the beforeunload event which allows the application to warn against losing unsaved changes. The application router will need to provide a hook to replicate this functionality i.e. ‘beforeRouting’.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Search engine ranking
Whilst some SPAs don’t require SEO, for those that do solutions aren’t straightforward.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Loading CSS &amp;amp; Javascript
If an SPA grows to a significant size, loading the entire application on page load may be detrimental to the experience because it’s akin to loading all pages of a website when only the home page was requested. Unfortunately, this leads to attempting to load CSS and JS for certain pages. Script loading is notoriously difficult and contains unreliable hacks which can can be fatal to the reliability of the application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Analytics is harder to implement
Analytics tools will normally track page views and related tools without any extra effort but because an SPA page isn’t really a page, this has to be handled with extra script which is triggered by the application router.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automated functional testing
Whilst you can use Selenium (and other equivalents) to test SPAs, extra effort is required to handle timeouts of XHR calls because there is no signal to Selenium that an XHR call has finished, like there is when a real page finishes loading. This leads to more questions and problems; How long should the timeout be? What happens if it takes longer than normal? The test execution will likely be slower too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Performance problems
Pages are “long lived” increasing the chance of exposing a memory leak due to lack of page reloads. This is known to degrade UX and cause battery drain on mobile devices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Loading indicator issues
When a traditional page is requested, the browser shows a loading indicator custom to that browser. This provides the most accurate indication of when a page will finish loading. With client-side routing, you have to implement your own loading indicator which is detrimental to the User Experience for two reasons:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First, the Javascript implemented loading indicator is inaccurate in terms of progress, because it doesn’t have access to progress information like the browser does and second, it’s disorientating to the user because the individual gets used to the behaviour of their chosen browser and unconsciously and intuitively understands where to look for this information. A Javascript solution is always different.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It’s going to fail!
Everyone has Javascript, Right? Wrong. It’s going to fail and because SPAs depend on many different Javascript enhancements, when it does fail it will do so in a fatal way as they tend not to conform to Progressive Enhancement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Summary
Whilst SPAs are meant to provide a better experience, it’s clear and ironic that they are much harder to design and build with a result that is detrimental to the user.&lt;/p&gt;

&lt;p&gt;Javascript is never going to beat the browser at what it does best — browsing. You can still have beautifully rich, enhanced experiences without cramming an entire site into one document.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Oct 2016 10:11:00 +0100</pubDate>
        <link>http://nnamso.github.io/tech/2016/10/19/The-Disadvantage-Of-Single-Pahe-Applications.html</link>
        <guid isPermaLink="true">http://nnamso.github.io/tech/2016/10/19/The-Disadvantage-Of-Single-Pahe-Applications.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>THE END OF APP STORES</title>
        <description>&lt;h3&gt;Uber isn’t just killing the taxi industry. Its relentless approach to distribution and scale is also putting a nail in the coffin of app stores.&lt;/h3&gt;

&lt;p&gt;

Smart companies like Uber are rewriting the app distribution rulebook. Instead of being a bland icon lost amongst millions of others, they’ve chosen to aggressively accelerate their growth through deep integrations with services that people habitually use. It’s the start of a mass migration from the app store which is set to kill a long broken model for good.

&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jan 2016 10:46:00 +0100</pubDate>
        <link>http://nnamso.github.io/tech/2016/01/27/The-End-Of-App-Stores.html</link>
        <guid isPermaLink="true">http://nnamso.github.io/tech/2016/01/27/The-End-Of-App-Stores.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Jekyll Test Automation</title>
        <description>&lt;h3&gt;Testing jekyll&lt;/h3&gt;

&lt;p&gt;

When you treat content as code, you get the opportunity to co-opt best-of-breed developer workflows, and continuous integration is no exception. We’ve all been there. You make a simple change and end up breaking two or three other things. Links get out of date. Images move. Imagine if every time you made a change, all those things that you consciously or subconsciously worry about were automatically checked. Are my links accurate? Did any of my images break? Does this darn thing actually render the way I want it to? &lt;/p&gt;

&lt;p&gt;

With CI services like Travis CI, whether public or private, adding continuous integration to a repository of prose content, whether an entire website or a collection of HTML or Markdown files becomes trivial, especially when you use open source tools like HTML Proofer.
&lt;/p&gt;

&lt;p&gt;
Continuous integration (CI) is the idea that for every change, whether proposed or realized, a standard battery of tests run, to confirm the change does what you intend it to do. In most developer tools, like GitHub, you get instant feedback, in the form of a green light, to let you know that that is in fact the case, or a red light, in the event that something went awry, detailing exactly what doesn’t match you specified expectations. &lt;/p&gt;

&lt;p&gt;

With CI services like [Travis CI](https://travis-ci.org/), whether public or private, adding continuous integration to a repository of prose content, whether an entire website or a collection of HTML or Markdown files becomes trivial, especially when you use open source tools like [HTML Proofer](https://github.com/gjtorikian/html-proofer). &lt;/p&gt;
</description>
        <pubDate>Tue, 19 Jan 2016 12:23:00 +0100</pubDate>
        <link>http://nnamso.github.io/general/2016/01/19/Jekyll-Test-Automation.html</link>
        <guid isPermaLink="true">http://nnamso.github.io/general/2016/01/19/Jekyll-Test-Automation.html</guid>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>URLs are how we share information today</title>
        <description>&lt;p&gt;Hundreds of years ago, the way humans shared information was through storytelling. Writing and the printing press shifted things towards written communication (passing around dead trees to share information), and the internet shifted us once again to the digital. Today, the primary means of sharing information with another human is through a URL. Maybe in 10 years we’ll have virtual 3D worlds and you’ll describe directions to walk to a virtual location to get information, but for now, URLs are the primary means by which an idea can be widely shared, and it does so by assigning a globally unique identifier to each. Want to share a Premium Times article? Send them a URL. A product on Konga? A funny Tweet? Whether you realize it or not, every major online system we use today creates unique URLs for each distinct idea.&lt;/p&gt;

&lt;p&gt;Ask yourself this: Has your organization’s workflow changed much since the Cold War? Since the advent of the internet? If you swapped out your laptop for a typewriter and email for inter-office couriers would the way you work be all that fundamentally different? From video conferencing to a distributed workforce to real-time chat, the tools available to organizations has radically shifted. Shouldn’t our workflows improve as a result of that shift, at least a little?&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 12:23:00 +0100</pubDate>
        <link>http://nnamso.github.io/general/2016/01/18/urls.html</link>
        <guid isPermaLink="true">http://nnamso.github.io/general/2016/01/18/urls.html</guid>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>A message to my future self</title>
        <description>&lt;p&gt;&lt;strong&gt;A message to your future self&lt;/strong&gt; – Ever go back and look at old code, only to scratch your head as to what&amp;#39;s going on? The same you that may be asking yourself what you were thinking when you got a tattoo five years back, is also going to be asking why you wrote that singleton function five years ago. Yet when you write open source, you mitigate that risk by explaining your code in such a way that others (including your future self) can understand it. In a world of system orientated architectures and ever-changing requirements, the chance that a software project is one-and-done is increasingly rare, not to mention the fact that by failing to properly document, you&amp;#39;re introducing a significant risk of vendor lock in. Your successor will thank you, and so will the person paying the bills.&lt;/p&gt;

&lt;p&gt;The reality of today&amp;#39;s business environment is that all software is inherently &amp;quot;open source&amp;quot;, even if the scope of the sharing is limited to an organization. Assume the software is open, needs to be modular, and will be repurposed, and you will save significant costs in the long run. And when you require the same of outside contractors, you get better, more flexible code, and offset the risks of vendor or technology lock in in the long run.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 12:23:00 +0100</pubDate>
        <link>http://nnamso.github.io/general/2016/01/18/A-message-to-your-future-self.html</link>
        <guid isPermaLink="true">http://nnamso.github.io/general/2016/01/18/A-message-to-your-future-self.html</guid>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Am Sick And Tired</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/article_images/am-sick-and-tired/asat.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I’m sick of people buying things they don’t want just to impress the people they don’t like.&lt;/p&gt;

&lt;p&gt;And I’m tired of the media pushing these ugly African models&lt;/p&gt;

&lt;p&gt;Trying to convince me they exotic when they just plain ugly&lt;/p&gt;

&lt;p&gt;There’s not only one type of black beauty.&lt;/p&gt;

&lt;p&gt;I’m sick of people sitting down complaining that there is no job.&lt;/p&gt;

&lt;p&gt;I’m tired of girls thinking that being attractive is an occupation.&lt;/p&gt;

&lt;p&gt;I’m sick of Ghanaians still hating on Nigerians when we are suppose to be united.&lt;/p&gt;

&lt;p&gt;I’m sick of ladies having fake ass, fake breast, fake looks, and fake accent just to impress me.&lt;/p&gt;

&lt;p&gt;And I want to smack people who don’t even realize Nigeria is a country and Africa is a continent.&lt;/p&gt;

&lt;p&gt;I’m sick and tired of power outbreak in Nigeria.&lt;/p&gt;

&lt;p&gt;I’m sick of police saying that bail is free, when I just paid 50,000 Naira in exchanged for his release and I was given no receipt.&lt;/p&gt;

&lt;p&gt;And I’m sick of people bragging about the ghetto
the ghetto’s a situation we supposed to be getting out of not embracing.&lt;/p&gt;

&lt;p&gt;And I’m sick of everybody trying to be in the entertainment industry
because soon, there’ll be no audience just a bunch of monkeys on stage dancing.&lt;/p&gt;

&lt;p&gt;I’m still sick; I think I need panadol, what are your sick of?&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 08:38:00 +0100</pubDate>
        <link>http://nnamso.github.io/general/2016/01/18/Am-Sick-And-Tired.html</link>
        <guid isPermaLink="true">http://nnamso.github.io/general/2016/01/18/Am-Sick-And-Tired.html</guid>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Phishing</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://media.licdn.com/mpr/mpr/jc/p/3/005/0ae/202/21dc89e.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Phishing is the attempt to acquire sensitive information such as usernames, passwords, and credit card details (and sometimes, indirectly, money) by masquerading as a trustworthy entity in an electronic communication.&lt;/p&gt;

&lt;p&gt;Phishing is a continual threat that keeps growing to this day. The risk grows even larger as Internet audience keeps increasing and it shows no sign of slowing down. You don’t have to be a hacker or get a 419-degree from Harvard only if that exist. It will take less than 10 minute to clone the UI (user interface) of any site online depending on the site size.&lt;/p&gt;

&lt;p&gt;So how does this work?&lt;/p&gt;

&lt;p&gt;Let say you own Amazon.com and I want to get peoples credit card number.&lt;/p&gt;

&lt;p&gt;Simple&lt;/p&gt;

&lt;p&gt;I will just have to buy Ammazon.com or Amazon.org clone the UI (user interface) upload it a server and that’s it. A user who doesn’t pay attention to URL then you have been served.&lt;/p&gt;

&lt;p&gt;Once I get the card details into my database I will just redirect you to the original site and it’s that simple.&lt;/p&gt;

&lt;p&gt;Ok, my reason for writing this article is that a company hired me to do a background check on a company they wanted to buy from in Thailand.&lt;/p&gt;

&lt;p&gt;Long story short&lt;/p&gt;

&lt;p&gt;After backtracking this company that literally doesn’t actually exist, I found out that they had two fake websites&lt;/p&gt;

&lt;p&gt;This first URL Claim to be the real site and referred to the second site as fake.&lt;/p&gt;

&lt;p&gt;Pitoon Kan: In his words; they are fraud and they are hackers.&lt;/p&gt;

&lt;p&gt;These made me recall the saying: A pot calling a kettle black&lt;/p&gt;

&lt;p&gt;1) http://kanokpitonepaperindustrial.com/&lt;/p&gt;

&lt;p&gt;2) http://kanokpitonepaperindustry.com/&lt;/p&gt;

&lt;p&gt;Meanwhile the truth is that they are both fake site&lt;/p&gt;

&lt;p&gt;Their plan was to make my client believe that the first site is genuine and the second one was not the genuine site. That will make him transfer the fund to them.&lt;/p&gt;

&lt;p&gt;So I requested to talk to them on Skype.&lt;/p&gt;

&lt;p&gt;After a short conversation with the two parties they refuse to show up their faces.&lt;/p&gt;

&lt;p&gt;They said they use desktop system in their offices so they can’t do video call.&lt;/p&gt;

&lt;p&gt;That’s just a trick to say f*ck you I cant show you my face.&lt;/p&gt;

&lt;p&gt;Please don’t transfer money to anyone account except you are using payment gateway like PayPal, visa, MasterCard etc. I say that because the bank at list has their details, I mean the account holder.&lt;/p&gt;

&lt;p&gt;Don’t be deceived&lt;/p&gt;

&lt;p&gt;Don’t forget to do background check first. Don’t let your emotions guide you and don’t be greedy. 95% percent of Internet fraud was accomplished because the defaulter was also a greedy person.&lt;/p&gt;

&lt;p&gt;Don’t claim any money from Nigerian prince lol its not yours. Thanks&lt;/p&gt;

&lt;p&gt;That’s how my client would have lost $1400. It might be small who know what would have happened next.&lt;/p&gt;

&lt;p&gt;Once I publish this article I will send them the link.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 08:13:00 +0100</pubDate>
        <link>http://nnamso.github.io/security/2016/01/18/Phishing.html</link>
        <guid isPermaLink="true">http://nnamso.github.io/security/2016/01/18/Phishing.html</guid>
        
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>Building An Empire</title>
        <description>&lt;p&gt;I LOVE THE WORD: Connecting the Dot. &lt;/p&gt;

&lt;p&gt;I have been connecting the dot for a while now. &lt;/p&gt;

&lt;p&gt;I am building an empire. In the interest of helping people who might otherwise be inclined to believe that Stuff Just Happens, I thought I’d share my plan with you.&lt;/p&gt;

&lt;p&gt;Now, before I am rich and famous, so when people accuse me of being disingenuous when I say I make my own luck, I can say “hey&amp;quot; didn’t you read my blog?”My plan is a twist on this simple and well-known classic:&lt;/p&gt;

&lt;p&gt;Watch Youtube.
???
Profit!
Maybe play video games…
OK, My real goal is to:&lt;/p&gt;

&lt;p&gt;[1] Make kickass software and change the world for the better. And make the world a better place.&lt;/p&gt;

&lt;p&gt;[2] Inspire &amp;amp; help a thousand designers/developers to launch their own products&lt;/p&gt;

&lt;p&gt;[3] Make alot of money&lt;/p&gt;

&lt;p&gt;[4] Yes, I want to be rich, famous, and influential. is that all? Well, I think so. Wouldn’t want to be greedy, now!&lt;/p&gt;

&lt;p&gt;Plan or do not plan, there is no luck&lt;/p&gt;

&lt;p&gt;If you take yourself seriously, you have to plan. If you don’t take yourself seriously, you don’t have to plan — and, as we all know, a failure to plan, is a plan to fail.&lt;/p&gt;

&lt;p&gt;Planning is a love letter to your future. &lt;/p&gt;

&lt;p&gt;I take myself seriously. And I loooooove my future and want it to feel that special love through time! So I plan.&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Jan 2016 11:27:00 +0100</pubDate>
        <link>http://nnamso.github.io/general/2016/01/16/Building-An-Empire.html</link>
        <guid isPermaLink="true">http://nnamso.github.io/general/2016/01/16/Building-An-Empire.html</guid>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Cognitive Virality</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://nnamso.github.io/assets/article_images/cognitive-virality/cognitive-virality.png&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;This research is as a result of my personal interest on why things go viral.&lt;/h3&gt;

&lt;p&gt;
Virality of content circulated rapidly and widely from one Internet user to another: a viral ad campaign | the video went viral and was seen by millions.&lt;/p&gt;

&lt;p&gt;
Virality the tendency of an image, video, or piece of information to be circulated rapidly and widely from one Internet user to another; the quality or fact of being viral: new metrics will allow marketers to better assess the virality of their campaigns. &lt;/p&gt;

&lt;p&gt;
More info will be disclosed soon. &lt;/p&gt;
</description>
        <pubDate>Sat, 16 Jan 2016 10:30:00 +0100</pubDate>
        <link>http://nnamso.github.io/general/2016/01/16/Cognitive-virality.html</link>
        <guid isPermaLink="true">http://nnamso.github.io/general/2016/01/16/Cognitive-virality.html</guid>
        
        
        <category>general</category>
        
      </item>
    
  </channel>
</rss>
